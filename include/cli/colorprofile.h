/*******************************************************************************
 * CLI - A simple command line interface.
 * Copyright (C) 2016-2021 Daniele Pallastrelli
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#ifndef CLI_COLORPROFILE_H_
#define CLI_COLORPROFILE_H_

#include "detail/rang.h"

namespace cli
{

inline bool& Color() { static bool color; return color; }

inline void SetColor() { Color() = true; }
inline void SetNoColor() { Color() = false; }

enum BeforePrompt { beforePrompt };
enum AfterPrompt { afterPrompt };
enum BeforeInput { beforeInput };
enum AfterInput { afterInput };

enum Reset { reset };

template<typename ColorEnumT>
struct StyleHelper
{
    StyleHelper(ColorEnumT inColor, detail::rang::style inStyle = detail::rang::style::reset)
        : color(inColor)
        , style(inStyle)
    {
    }

    ColorEnumT color;
    detail::rang::style style = detail::rang::style::reset;
};

namespace Style
{
    using FGColor = StyleHelper<detail::rang::fg>;  
    
    FGColor Command() { return FGColor(detail::rang::fg::gray, detail::rang::style::italic); }
    FGColor Parameter() { return FGColor(detail::rang::fg::cyan); }
    FGColor ObjectId() { return FGColor(detail::rang::fg::green); }
    FGColor Object() { return FGColor(detail::rang::fg::cyan); }
    FGColor Mech() { return FGColor(detail::rang::fg::yellow); }

    FGColor Green() { return FGColor(detail::rang::fg::green); }
    FGColor Red() { return FGColor(detail::rang::fg::red); }
}

inline std::ostream& operator<<(std::ostream& os, BeforePrompt)
{
    if ( Color() ) { os << detail::rang::control::forceColor << detail::rang::fg::green << detail::rang::style::bold; }
    return os;
}

inline std::ostream& operator<<(std::ostream& os, AfterPrompt)
{
    os << detail::rang::style::reset;
    return os;
}

inline std::ostream& operator<<(std::ostream& os, BeforeInput)
{
    if ( Color() ) { os << detail::rang::control::forceColor << detail::rang::fgB::gray; }
    return os;
}

inline std::ostream& operator<<(std::ostream& os, AfterInput)
{
    os << detail::rang::style::reset;
    return os;
}

template<typename ColorEnumT>
inline std::ostream& operator<<(std::ostream& os, StyleHelper<ColorEnumT> style)
{
    if (!Color())
        return os;

    if (style.color != ColorEnumT::reset)
    {
        os << detail::rang::control::forceColor << style.color;
    }

    if (style.style != detail::rang::style::reset)
    {
        os << style.style;
    }

    return os;
}

inline std::ostream& operator<<(std::ostream& os, Reset)
{
    os << detail::rang::style::reset;
    return os;
}

} // namespace cli

#endif // CLI_COLORPROFILE_H_


